#include <iostream>
using namespace std;

int findShortestJobIndex(int arrivalTime[], int burstTime[], int n, int currentTime) {
    int minTime = 1000000;
    int idx = -1;

    for (int i = 0; i < n; i++) {
        if (arrivalTime[i] <= currentTime && burstTime[i] < minTime && burstTime[i] > 0) {
            minTime = burstTime[i];
            idx = i;
        }
    }
    return idx;
}

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;

    int arrivalTime[n], burstTime[n], originalBurstTime[n], completionTime[n], turnaroundTime[n], waitingTime[n];

    for (int i = 0; i < n; i++) {
        cout << "Enter arrival time of process " << i + 1 << ": ";
        cin >> arrivalTime[i];
        cout << "Enter burst time of process " << i + 1 << ": ";
        cin >> burstTime[i];
        originalBurstTime[i] = burstTime[i];
    }

    int currentTime = 0;
    int processesCompleted = 0;

    while (processesCompleted < n) {
        int idx = findShortestJobIndex(arrivalTime, burstTime, n, currentTime);

        if (idx != -1) {
            currentTime += burstTime[idx];
            completionTime[idx] = currentTime;
            turnaroundTime[idx] = completionTime[idx] - arrivalTime[idx];
            waitingTime[idx] = turnaroundTime[idx] - originalBurstTime[idx];

            processesCompleted++;
            burstTime[idx] = 0;
        } else {
            currentTime++;
        }
    }

    // Print header of the table
    cout << "\nProcess ID\tAT\tBT\tCT\tTAT\tWT\n";
    cout << "----------------------------------------------------\n";

    for (int i = 0; i < n; i++) {
        cout<<i + 1<<"\t\t"<<arrivalTime[i]<<"\t"<<originalBurstTime[i]<<"\t"<<completionTime[i]<<"\t"<<turnaroundTime[i]<<"\t"<<waitingTime[i]<<endl;
    }

    return 0;
}
