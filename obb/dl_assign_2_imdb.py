# -*- coding: utf-8 -*-
"""DL_assign-2-IMDB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10tZX3fIWm93JbeAqW3r7CS0F5Diq0jdR
"""

# Binary classification using Deep Neural Networks Example: Classify movie
#  reviews into positive" reviews and "negative" reviews, just based on the text content of the reviews.Use
#  IMDB datase

import numpy as np
from keras.datasets import imdb
from keras import models, layers

# Load IMDB dataset (only top 10,000 most frequent words)
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=10000)

# Convert sequences of word indices into binary vector form
def vectorize(sequences, dim=10000):
    result = np.zeros((len(sequences), dim))
    for i, seq in enumerate(sequences):
        result[i, seq] = 1
    return result

x_train = vectorize(x_train)
x_test = vectorize(x_test)

# Define a simple deep neural network model
model = models.Sequential([
    layers.Input(shape=(10000,)),  # Explicit input layer
    layers.Dense(16, activation='relu'),

    layers.Dense(1, activation='sigmoid')
])

# Compile the model with appropriate optimizer, loss function, and metric
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model on training data with a validation split
model.fit(x_train, y_train, epochs=5, batch_size=512, validation_split=0.2)

# Evaluate the model on test data
results = model.evaluate(x_test, y_test)



