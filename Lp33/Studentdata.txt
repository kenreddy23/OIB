// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {

    // Define a structure to hold student information
    struct Student {
        uint id;
        string name;
        uint age;
        string course;
    }

    // Array to store Student records
    Student[] public students;

    // Mapping to check if student ID already exists
    mapping(uint => bool) private studentExists;

    // Event to emit when a new student is added
    event StudentAdded(uint id, string name);

    // Function to add a new student
    function addStudent(uint _id, string memory _name, uint _age, string memory _course) public {
        // Ensure the student ID does not already exist
        require(!studentExists[_id], "Student ID already exists");

        // Create a new Student struct and add it to the array
        Student memory newStudent = Student({
            id: _id,
            name: _name,
            age: _age,
            course: _course
        });

        students.push(newStudent);
        studentExists[_id] = true;

        // Emit event to notify student addition
        emit StudentAdded(_id, _name);
    }

    // Function to retrieve student information by index
    function getStudent(uint index) public view returns (uint, string memory, uint, string memory) {
        require(index < students.length, "Student index out of range");

        Student memory student = students[index];
        return (student.id, student.name, student.age, student.course);
    }

    // Receive function to accept Ether
    receive() external payable {
        // Optional: custom logic when receiving Ether
    }

    // Fallback function to handle non-existent function calls
    fallback() external payable {
        // Revert the transaction if fallback is called
        revert("Fallback function triggered - invalid call");
    }

    // Function to get the total number of students
    function getStudentCount() public view returns (uint) {
        return students.length;
    }
}

